# PowerShell QA CI Pipeline - GitHub Actions
# Production-grade PowerShell code quality automation
# Version: 3.0.0

name: PowerShell QA CI

on:
  push:
    branches: [ main, develop, 'feature/**' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  POWERSHELL_TELEMETRY_OPTOUT: 1
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
  qa-analyze:
    name: QA Analysis
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            shell: pwsh
          - os: windows-latest
            shell: pwsh
          - os: macos-latest
            shell: pwsh

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: Setup PowerShell 7
        uses: PowerShell/setup-powershell@v1
        with:
          powershell-version: '7.4.x'

      - name: Install PSScriptAnalyzer
        shell: ${{ matrix.shell }}
        run: |
          Install-Module -Name PSScriptAnalyzer -Scope CurrentUser -Force -SkipPublisherCheck
          Install-Module -Name Pester -Scope CurrentUser -Force -SkipPublisherCheck -MinimumVersion 5.0.0

      - name: Verify module installation
        shell: ${{ matrix.shell }}
        run: |
          Get-Module -ListAvailable PSScriptAnalyzer, Pester | Format-Table Name, Version

      - name: Run PSSA Analysis
        shell: ${{ matrix.shell }}
        run: |
          $settings = './qa/config/PSScriptAnalyzerSettings.psd1'
          if (Test-Path $settings) {
            Write-Host "Running PSScriptAnalyzer with settings: $settings"
            $results = Invoke-ScriptAnalyzer -Path . -Settings $settings -Recurse -ReportSummary

            $errors = $results | Where-Object { $_.Severity -eq 'Error' }
            $warnings = $results | Where-Object { $_.Severity -eq 'Warning' }

            Write-Host "`nSummary:"
            Write-Host "Errors: $($errors.Count)"
            Write-Host "Warnings: $($warnings.Count)"

            if ($errors.Count -gt 0) {
              Write-Error "PSSA found $($errors.Count) error(s). Please fix before merging."
              exit 1
            }

            if ($warnings.Count -gt 10) {
              Write-Warning "PSSA found $($warnings.Count) warnings (threshold: 10)"
            }
          }

      - name: Run AST Analysis
        shell: ${{ matrix.shell }}
        run: |
          if (Test-Path './qa/modules/Analyzers/PSQAASTAnalyzer.psm1') {
            Import-Module './qa/modules/Analyzers/PSQAASTAnalyzer.psm1' -Force

            $psFiles = Get-ChildItem -Path . -Include *.ps1,*.psm1 -Recurse |
                       Where-Object { $_.FullName -notmatch '[\\/](bin|obj|node_modules|\.git)[\\/]' }

            $totalIssues = 0
            foreach ($file in $psFiles) {
              Write-Host "Analyzing: $($file.Name)"
              $issues = Invoke-PSQAASTAnalysis -FilePath $file.FullName
              if ($issues) {
                $totalIssues += $issues.Count
                $issues | ForEach-Object {
                  Write-Host "  [$($_.Severity)] Line $($_.Line): $($_.Message)"
                }
              }
            }

            Write-Host "`nTotal AST issues found: $totalIssues"
          }

      - name: Generate JSON Report
        shell: ${{ matrix.shell }}
        run: |
          $report = @{
            timestamp = (Get-Date).ToString('o')
            os = '${{ matrix.os }}'
            powershell_version = $PSVersionTable.PSVersion.ToString()
            trace_id = (New-Guid).ToString()
          }

          $report | ConvertTo-Json -Depth 10 | Set-Content -Path 'qa-report-${{ matrix.os }}.json'

      - name: Upload QA Report
        uses: actions/upload-artifact@v4
        with:
          name: qa-report-${{ matrix.os }}
          path: qa-report-${{ matrix.os }}.json
          retention-days: 30

  qa-autofix:
    name: Auto-Fix (Dry Run)
    runs-on: ubuntu-latest
    needs: qa-analyze

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup PowerShell 7
        uses: PowerShell/setup-powershell@v1
        with:
          powershell-version: '7.4.x'

      - name: Install PSScriptAnalyzer
        shell: pwsh
        run: |
          Install-Module -Name PSScriptAnalyzer -Scope CurrentUser -Force -SkipPublisherCheck

      - name: Run Auto-Fix (Dry Run)
        shell: pwsh
        run: |
          if (Test-Path './qa/tools/Apply-AutoFix.ps1') {
            & './qa/tools/Apply-AutoFix.ps1' -Path . -DryRun -ShowDiff
          } else {
            Write-Host "Auto-fix script not found, skipping"
          }

  pester-tests:
    name: Pester Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup PowerShell 7
        uses: PowerShell/setup-powershell@v1
        with:
          powershell-version: '7.4.x'

      - name: Install Pester v5
        shell: pwsh
        run: |
          Install-Module -Name Pester -Scope CurrentUser -Force -SkipPublisherCheck -MinimumVersion 5.0.0

      - name: Run Pester Tests
        shell: pwsh
        run: |
          $config = New-PesterConfiguration
          $config.Run.Path = './qa/tests'
          $config.Run.PassThru = $true
          $config.CodeCoverage.Enabled = $true
          $config.CodeCoverage.Path = './qa/modules/**/*.psm1'
          $config.CodeCoverage.OutputFormat = 'JaCoCo'
          $config.CodeCoverage.OutputPath = './coverage.xml'
          $config.TestResult.Enabled = $true
          $config.TestResult.OutputPath = './test-results.xml'
          $config.Output.Verbosity = 'Detailed'

          $results = Invoke-Pester -Configuration $config

          if ($results.FailedCount -gt 0) {
            Write-Error "Pester tests failed: $($results.FailedCount) test(s)"
            exit 1
          }

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.os }}
          path: |
            test-results.xml
            coverage.xml
          retention-days: 30

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [qa-analyze, qa-autofix, pester-tests]
    if: always()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all reports
        uses: actions/download-artifact@v4
        with:
          path: ./reports

      - name: Quality Gate Decision
        shell: pwsh
        run: |
          Write-Host "╔════════════════════════════════════════════════════════════╗"
          Write-Host "║            QUALITY GATE VALIDATION                         ║"
          Write-Host "╚════════════════════════════════════════════════════════════╝"

          # Parse reports and make gate decision
          $passed = $true

          # Check for critical issues
          $reports = Get-ChildItem -Path ./reports -Filter *.json -Recurse
          foreach ($report in $reports) {
            Write-Host "Checking: $($report.Name)"
            # Add gate logic here
          }

          if ($passed) {
            Write-Host "`n✅ QUALITY GATE: PASSED" -ForegroundColor Green
            exit 0
          } else {
            Write-Host "`n❌ QUALITY GATE: FAILED" -ForegroundColor Red
            exit 1
          }
