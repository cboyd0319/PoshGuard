# PowerShell Script Analyzer Settings - Production Grade Configuration
# Zero-tolerance quality enforcement for PowerShell 5.1 and 7.x compatibility
# Generated by PowerShell QA Auto-Fix Engine

[CmdletBinding()]
param()


@{
    # === CORE CONFIGURATION ===

    # Include all default rules as baseline - comprehensive coverage
    IncludeDefaultRules = $true

    # Enforce all severity levels - zero tolerance approach
    Severity            = @('Error', 'Warning', 'Information')

    # === RULE EXCLUSIONS ===
    # Minimal exclusions with detailed justification

    ExcludeRules        = @(
        # Platform compatibility rules that require complex configuration
        'PSUseCompatibleCommands',    # Requires TargetProfiles for cross-platform analysis
        'PSUseCompatibleCmdlets',     # May conflict with legitimate platform-specific code
        'PSUseCompatibleTypes',       # .NET Framework vs Core compatibility complexity

        # Rules that may conflict with auto-fix policies
        'PSAlignAssignmentStatement'  # Prefer compact, readable assignment style
    )

    # === CUSTOM RULE CONFIGURATION ===
    # Bulletproof formatting and style enforcement

    Rules               = @{

        # === FORMATTING RULES (Zero Tolerance) ===

        PSUseConsistentIndentation                     = @{
            Enable              = $true
            IndentationSize     = 4                                    # Standard 4-space indentation
            PipelineIndentation = 'IncreaseIndentationForFirstPipeline' # Readable pipeline formatting
            Kind                = 'space'                                         # Spaces only, no tabs
        }

        PSUseConsistentWhitespace                      = @{
            Enable                          = $true
            CheckInnerBrace                 = $true       # Consistent spacing in { }
            CheckOpenBrace                  = $true        # Space before opening braces
            CheckOpenParen                  = $true        # No space before opening parentheses
            CheckOperator                   = $true         # Spaces around operators
            CheckPipe                       = $true             # Consistent pipe spacing
            CheckPipeForRedundantWhitespace = $true # Remove extra pipe whitespace
            CheckSeparator                  = $true        # Consistent comma/semicolon spacing
            CheckParameter                  = $false       # Allow flexible parameter spacing
        }

        PSPlaceOpenBrace                               = @{
            Enable             = $true
            OnSameLine         = $true           # K&R style braces
            NewLineAfter       = $true         # Force newline after opening brace
            IgnoreOneLineBlock = $true   # Allow compact one-liners
        }

        PSPlaceCloseBrace                              = @{
            Enable             = $true
            NewLineAfter       = $false        # No forced newline after closing brace
            IgnoreOneLineBlock = $true   # Allow compact one-liners
            NoEmptyLineBefore  = $false   # Allow breathing room before }
        }

        PSAvoidTrailingWhitespace                      = @{
            Enable = $true              # Mandatory - no trailing whitespace
        }

        PSUseCorrectCasing                             = @{
            Enable = $true              # Enforce PowerShell cmdlet casing standards
        }

        PSAvoidLongLines                               = @{
            Enable            = $true
            MaximumLineLength = 120      # Reasonable limit for readability and code review
        }

        # === SECURITY RULES (Critical Enforcement) ===

        PSAvoidUsingPlainTextForPassword               = @{
            Enable = $true              # Never allow plaintext passwords
        }

        PSAvoidUsingConvertToSecureStringWithPlainText = @{
            Enable = $true              # Enforce proper SecureString usage
        }

        PSUsePSCredentialType                          = @{
            Enable = $true              # Proper credential parameter types
        }

        PSAvoidUsingUsernameAndPasswordParams          = @{
            Enable = $true              # Avoid separate username/password parameters
        }

        PSAvoidUsingInvokeExpression                   = @{
            Enable = $true              # Critical - prevent code injection
        }

        PSAvoidGlobalVars                              = @{
            Enable = $true              # Minimize global state pollution
        }

        PSAvoidUsingEmptyCatchBlock                    = @{
            Enable = $true              # Enforce proper error handling
        }

        # === BEST PRACTICE RULES ===

        PSUseApprovedVerbs                             = @{
            Enable = $true              # Enforce PowerShell verb standards
        }

        PSUseSingularNouns                             = @{
            Enable = $true              # Consistent noun conventions
        }

        PSAvoidUsingCmdletAliases                      = @{
            Enable = $true              # Explicit cmdlet names for clarity
        }

        PSAvoidUsingPositionalParameters               = @{
            Enable = $true              # Named parameters for readability
        }

        PSUseCmdletCorrectly                           = @{
            Enable = $true              # Proper cmdlet usage patterns
        }

        PSUseDeclaredVarsMoreThanAssignments           = @{
            Enable = $true              # Detect unused variables
        }

        PSAvoidUnusedVariable                          = @{
            Enable = $true              # Clean up unused variables
        }

        PSReviewUnusedParameter                        = @{
            Enable = $true              # Review function parameters
        }

        # === DOCUMENTATION RULES ===

        PSProvideCommentHelp                           = @{
            Enable                  = $true
            ExportedOnly            = $false                # Require help for all functions
            BlockComment            = $true                 # Use block comments for help
            VSCodeSnippetCorrection = $true      # VS Code integration support
            Placement               = 'before'                 # Help before function definition
        }

        # === PERFORMANCE RULES ===

        PSAvoidUsingWriteHost                          = @{
            Enable = $true              # Use Write-Output or Write-Information instead
        }

        PSAvoidUsingWMICmdlets                         = @{
            Enable = $true              # Use CIM cmdlets instead of WMI
        }
    }

    # === ADVANCED CONFIGURATION ===

    # Custom severity overrides for specific scenarios
    CustomRulePath      = @()

    # Include rules for comprehensive analysis
    IncludeRules        = @(
        # All security-related rules (critical)
        'PSAvoidUsingPlainTextForPassword',
        'PSAvoidUsingConvertToSecureStringWithPlainText',
        'PSUsePSCredentialType',
        'PSAvoidUsingUsernameAndPasswordParams',
        'PSAvoidGlobalVars',
        'PSAvoidUsingInvokeExpression',
        'PSAvoidUsingEmptyCatchBlock',

        # Performance and reliability
        'PSUseDeclaredVarsMoreThanAssignments',
        'PSAvoidUnusedVariable',
        'PSReviewUnusedParameter',
        'PSAvoidUsingWriteHost',
        'PSAvoidUsingWMICmdlets',

        # Code style and maintainability
        'PSUseConsistentIndentation',
        'PSUseConsistentWhitespace',
        'PSPlaceOpenBrace',
        'PSPlaceCloseBrace',
        'PSAvoidTrailingWhitespace',
        'PSUseCorrectCasing',
        'PSUseApprovedVerbs',
        'PSUseSingularNouns',
        'PSAvoidUsingCmdletAliases',
        'PSAvoidUsingPositionalParameters',

        # Documentation and best practices
        'PSProvideCommentHelp',
        'PSUseShouldProcessForStateChangingFunctions',
        'PSUseOutputTypeCorrectly',
        'PSUseCmdletBindingAttribute'
    )
}
