name: 'Setup PowerShell Environment'
description: 'Sets up PowerShell with required modules for PoshGuard development'
inputs:
  modules:
    description: 'Comma-separated list of modules to install (PSScriptAnalyzer,Pester,ConvertToSARIF)'
    required: false
    default: 'PSScriptAnalyzer'
  cache-key-suffix:
    description: 'Additional suffix for cache key'
    required: false
    default: ''

runs:
  using: 'composite'
  steps:
    - name: Cache PowerShell modules
      uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.2
      with:
        path: |
          ~/.local/share/powershell/Modules
          ~/Documents/PowerShell/Modules
        key: ${{ runner.os }}-pwsh-${{ runner.arch }}-${{ hashFiles('**/PSScriptAnalyzerSettings.psd1') }}-${{ inputs.cache-key-suffix }}
        restore-keys: |
          ${{ runner.os }}-pwsh-${{ runner.arch }}-

    - name: Install PowerShell modules
      shell: pwsh
      run: |
        $ErrorActionPreference = 'Stop'
        $modules = '${{ inputs.modules }}' -split ','

        foreach ($module in $modules) {
          $module = $module.Trim()
          if ($module) {
            Write-Host "Checking module: $module" -ForegroundColor Cyan
            if (!(Get-Module -ListAvailable $module)) {
              Write-Host "Installing $module..." -ForegroundColor Yellow
              $installParams = @{
                Name = $module
                Scope = 'CurrentUser'
                Force = $true
              }

              # Add SkipPublisherCheck for known modules
              if ($module -in @('PSScriptAnalyzer', 'Pester', 'ConvertToSARIF')) {
                $installParams['SkipPublisherCheck'] = $true
              }

              # Add AcceptLicense for ConvertToSARIF
              if ($module -eq 'ConvertToSARIF') {
                $installParams['AcceptLicense'] = $true
              }

              Install-Module @installParams
              Write-Host "✓ Installed $module" -ForegroundColor Green
            } else {
              $version = (Get-Module -ListAvailable $module | Select-Object -First 1).Version
              Write-Host "✓ $module v$version already available" -ForegroundColor Green
            }
          }
        }
