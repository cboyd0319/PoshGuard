name: Code Scanning

# This workflow performs static code analysis using PSScriptAnalyzer and uploads
# results to GitHub Code Scanning (Security tab) in SARIF format.
# SARIF (Static Analysis Results Interchange Format) enables GitHub Advanced Security
# to display security vulnerabilities and code quality issues in the repository's
# Security tab under "Code scanning alerts".

on:
  push:
    branches: [main]
    paths:
      - '**.ps1'
      - '**.psm1'
      - '**.psd1'
      - '.github/workflows/code-scanning.yml'
  pull_request:
    branches: [main]
    paths:
      - '**.ps1'
      - '**.psm1'
      - '**.psd1'
      - '.github/workflows/code-scanning.yml'
  schedule:
    # Run weekly on Sunday at 6 AM UTC
    - cron: '0 6 * * 0'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  security-events: write  # Required for uploading SARIF results
  actions: read          # Required for code scanning workflow

jobs:
  code-scanning:
    name: PSScriptAnalyzer Code Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis
      
      - name: Setup PowerShell
        uses: microsoft/setup-powershell@v1
        with:
          pwsh: true
      
      - name: Cache PowerShell modules
        uses: actions/cache@v4
        with:
          path: ~/.local/share/powershell/Modules
          key: ${{ runner.os }}-powershell-modules-${{ hashFiles('**/PSScriptAnalyzerSettings.psd1') }}
          restore-keys: |
            ${{ runner.os }}-powershell-modules-
      
      - name: Install PSScriptAnalyzer
        shell: pwsh
        run: |
          Write-Host "Installing PSScriptAnalyzer..." -ForegroundColor Cyan
          if (!(Get-Module -ListAvailable PSScriptAnalyzer)) {
            Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser -SkipPublisherCheck
          }
          Import-Module PSScriptAnalyzer
          Write-Host "‚úì PSScriptAnalyzer $($(Get-Module PSScriptAnalyzer).Version) installed" -ForegroundColor Green
      
      - name: Install ConvertToSARIF
        shell: pwsh
        run: |
          Write-Host "Installing ConvertToSARIF module..." -ForegroundColor Cyan
          if (!(Get-Module -ListAvailable ConvertToSARIF)) {
            Install-Module -Name ConvertToSARIF -Force -Scope CurrentUser -AcceptLicense
          }
          Import-Module ConvertToSARIF
          Write-Host "‚úì ConvertToSARIF installed" -ForegroundColor Green
      
      - name: Run PSScriptAnalyzer
        shell: pwsh
        run: |
          Write-Host "üîç Running PSScriptAnalyzer code analysis..." -ForegroundColor Cyan
          
          # Define paths to analyze
          $pathsToAnalyze = @('PoshGuard', 'tools', 'tests', 'config')
          $allResults = @()
          
          foreach ($path in $pathsToAnalyze) {
            if (Test-Path $path) {
              Write-Host "`nAnalyzing: $path" -ForegroundColor Yellow
              
              $results = Invoke-ScriptAnalyzer `
                -Path $path `
                -Recurse `
                -Severity Error,Warning,Information `
                -Settings ./config/PSScriptAnalyzerSettings.psd1 `
                -ErrorAction SilentlyContinue
              
              if ($results) {
                $allResults += $results
                Write-Host "  Found $($results.Count) issue(s)" -ForegroundColor Gray
              } else {
                Write-Host "  No issues found" -ForegroundColor Green
              }
            }
          }
          
          # Report summary
          Write-Host "`nüìä Analysis Summary:" -ForegroundColor Cyan
          Write-Host "  Total issues: $($allResults.Count)" -ForegroundColor White
          
          if ($allResults) {
            $grouped = $allResults | Group-Object Severity
            foreach ($group in $grouped) {
              $color = switch ($group.Name) {
                'Error' { 'Red' }
                'Warning' { 'Yellow' }
                'Information' { 'Gray' }
                default { 'White' }
              }
              Write-Host "  $($group.Name): $($group.Count)" -ForegroundColor $color
            }
            
            # Save results for SARIF conversion
            $allResults | Export-Clixml -Path 'pssa-results.xml' -Depth 10
            Write-Host "`n‚úì Results saved to pssa-results.xml" -ForegroundColor Green
          } else {
            Write-Host "`n‚úì No issues found!" -ForegroundColor Green
            # Create empty results file for SARIF conversion
            @() | Export-Clixml -Path 'pssa-results.xml'
          }
      
      - name: Convert results to SARIF
        if: always()
        shell: pwsh
        run: |
          Write-Host "üìÑ Converting results to SARIF format..." -ForegroundColor Cyan
          
          Import-Module ConvertToSARIF
          
          if (Test-Path 'pssa-results.xml') {
            $results = Import-Clixml -Path 'pssa-results.xml'
            
            if ($results -and $results.Count -gt 0) {
              Write-Host "  Converting $($results.Count) issue(s)..." -ForegroundColor Gray
              $results | ConvertTo-SARIF -FilePath 'results.sarif'
            } else {
              Write-Host "  No issues to convert, creating empty SARIF..." -ForegroundColor Gray
              # Create minimal valid SARIF for empty results
              $emptySarif = @{
                '$schema' = 'https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.4.json'
                'version' = '2.1.0'
                'runs' = @(
                  @{
                    'tool' = @{
                      'driver' = @{
                        'name' = 'PSScriptAnalyzer'
                        'informationUri' = 'https://github.com/PowerShell/PSScriptAnalyzer'
                        'rules' = @()
                      }
                    }
                    'results' = @()
                    'columnKind' = 'utf16CodeUnits'
                  }
                )
              } | ConvertTo-Json -Depth 10
              Set-Content -Path 'results.sarif' -Value $emptySarif
            }
            
            Write-Host "‚úì SARIF file created: results.sarif" -ForegroundColor Green
            
            # Display SARIF summary
            $sarif = Get-Content 'results.sarif' | ConvertFrom-Json
            $resultCount = $sarif.runs[0].results.Count
            Write-Host "  SARIF contains $resultCount result(s)" -ForegroundColor Gray
          } else {
            Write-Error "Results file not found!"
            exit 1
          }
      
      - name: Upload SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: results.sarif
          category: poshguard-pssa
          # Upload even if there are no results to clear previous alerts
          wait-for-processing: true
      
      - name: Upload SARIF artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sarif-results
          path: results.sarif
          retention-days: 30
      
      - name: Upload analysis results artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pssa-results
          path: pssa-results.xml
          retention-days: 30
