name: Code Scanning

# This workflow performs static code analysis using PSScriptAnalyzer and uploads
# results to GitHub Code Scanning (Security tab) in SARIF format.
# SARIF (Static Analysis Results Interchange Format) enables GitHub Advanced Security
# to display security vulnerabilities and code quality issues in the repository's
# Security tab under "Code scanning alerts".

on:
  push:
    branches: [main]
    paths:
      - '**.ps1'
      - '**.psm1'
      - '**.psd1'
      - '.github/workflows/code-scanning.yml'
      - '.github/actions/**'
  pull_request:
    branches: [main]
    paths:
      - '**.ps1'
      - '**.psm1'
      - '**.psd1'
      - '.github/workflows/code-scanning.yml'
      - '.github/actions/**'
  schedule:
    # Run weekly on Sunday at 6 AM UTC
    - cron: '0 6 * * 0'
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: pwsh

jobs:
  code-scanning:
    name: PSScriptAnalyzer Code Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      security-events: write  # Required for uploading SARIF results
      actions: read           # Required for code scanning workflow

    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: Setup PowerShell modules
        uses: ./.github/actions/setup-powershell
        with:
          modules: 'PSScriptAnalyzer,ConvertToSARIF'
          cache-key-suffix: 'code-scanning'

      - name: Run PSScriptAnalyzer
        id: analyze
        run: |
          $ErrorActionPreference = 'Stop'

          Write-Host "üîç Running PSScriptAnalyzer code analysis..." -ForegroundColor Cyan

          # Define paths to analyze
          $pathsToAnalyze = @('PoshGuard', 'tools', 'tests', 'config')
          $allResults = @()

          foreach ($path in $pathsToAnalyze) {
            if (Test-Path $path) {
              Write-Host "`nAnalyzing: $path" -ForegroundColor Yellow

              try {
                $results = Invoke-ScriptAnalyzer `
                  -Path $path `
                  -Recurse `
                  -Severity Error,Warning,Information `
                  -Settings ./config/PSScriptAnalyzerSettings.psd1 `
                  -ErrorAction SilentlyContinue

                if ($results) {
                  $allResults += $results
                  Write-Host "  Found $($results.Count) issue(s)" -ForegroundColor Gray
                } else {
                  Write-Host "  No issues found" -ForegroundColor Green
                }
              }
              catch {
                Write-Warning "Error analyzing $path : $_"
              }
            }
          }

          # Generate summary
          $summary = "## Code Scanning Results`n`n"
          $summary += "**Total Issues:** $($allResults.Count)`n`n"

          if ($allResults) {
            $grouped = $allResults | Group-Object Severity
            foreach ($group in $grouped) {
              $summary += "- **$($group.Name):** $($group.Count)`n"
            }

            # Save results for SARIF conversion
            $allResults | Export-Clixml -Path 'pssa-results.xml' -Depth 10
            Write-Host "`n‚úì Results saved to pssa-results.xml" -ForegroundColor Green
          } else {
            $summary += "‚úÖ No issues found!`n"
            Write-Host "`n‚úì No issues found!" -ForegroundColor Green
            # Create empty results file for SARIF conversion
            @() | Export-Clixml -Path 'pssa-results.xml'
          }

          $summary | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append

      - name: Convert results to SARIF
        if: always()
        run: |
          $ErrorActionPreference = 'Stop'

          Write-Host "üìÑ Converting results to SARIF format..." -ForegroundColor Cyan

          Import-Module ConvertToSARIF

          if (Test-Path 'pssa-results.xml') {
            $results = Import-Clixml -Path 'pssa-results.xml'

            if ($results -and $results.Count -gt 0) {
              Write-Host "  Converting $($results.Count) issue(s)..." -ForegroundColor Gray
              try {
                $results | ConvertTo-SARIF -FilePath 'results.sarif'
              }
              catch {
                Write-Warning "Failed to convert with ConvertTo-SARIF: $_"
                Write-Host "Creating minimal SARIF file..."
                # Fallback to manual SARIF creation
                $emptySarif = @{
                  '$schema' = 'https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.4.json'
                  'version' = '2.1.0'
                  'runs' = @(
                    @{
                      'tool' = @{
                        'driver' = @{
                          'name' = 'PSScriptAnalyzer'
                          'informationUri' = 'https://github.com/PowerShell/PSScriptAnalyzer'
                          'rules' = @()
                        }
                      }
                      'results' = @()
                      'columnKind' = 'utf16CodeUnits'
                    }
                  )
                } | ConvertTo-Json -Depth 10
                Set-Content -Path 'results.sarif' -Value $emptySarif
              }
            } else {
              Write-Host "  No issues to convert, creating empty SARIF..." -ForegroundColor Gray
              # Create minimal valid SARIF for empty results
              $emptySarif = @{
                '$schema' = 'https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.4.json'
                'version' = '2.1.0'
                'runs' = @(
                  @{
                    'tool' = @{
                      'driver' = @{
                        'name' = 'PSScriptAnalyzer'
                        'informationUri' = 'https://github.com/PowerShell/PSScriptAnalyzer'
                        'rules' = @()
                      }
                    }
                    'results' = @()
                    'columnKind' = 'utf16CodeUnits'
                  }
                )
              } | ConvertTo-Json -Depth 10
              Set-Content -Path 'results.sarif' -Value $emptySarif
            }

            Write-Host "‚úì SARIF file created: results.sarif" -ForegroundColor Green

            # Display SARIF summary
            $sarif = Get-Content 'results.sarif' | ConvertFrom-Json
            $resultCount = $sarif.runs[0].results.Count
            Write-Host "  SARIF contains $resultCount result(s)" -ForegroundColor Gray
          } else {
            Write-Error "Results file not found!"
            exit 1
          }

      - name: Upload SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@f443b600d91635bebf5b0d9ebc620189c0d6fba5 # v4.30.8
        if: always()
        with:
          sarif_file: results.sarif
          category: poshguard-pssa
          wait-for-processing: true

      - name: Upload SARIF artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        if: always()
        with:
          name: sarif-results
          path: results.sarif
          retention-days: 30
          if-no-files-found: error

      - name: Upload analysis results artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        if: always()
        with:
          name: pssa-results-xml
          path: pssa-results.xml
          retention-days: 30
          if-no-files-found: error
