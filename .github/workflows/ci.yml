name: CI

on:
  push:
    branches: [main]
    paths:
      - '**.ps1'
      - '**.psm1'
      - '**.psd1'
      - 'tests/**'
      - 'config/**'
      - '.github/workflows/ci.yml'
      - '.github/actions/**'
  pull_request:
    paths:
      - '**.ps1'
      - '**.psm1'
      - '**.psd1'
      - 'tests/**'
      - 'config/**'
      - '.github/workflows/ci.yml'
      - '.github/actions/**'
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: pwsh

jobs:
  lint:
    name: Lint PowerShell Code
    runs-on: windows-latest
    timeout-minutes: 15
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@7884fcad6b5d53d10323aee724dc68d8b9096a2e # v5.0.0
        with:
          fetch-depth: 1

      - name: Setup PowerShell modules
        uses: ./.github/actions/setup-powershell
        with:
          modules: 'PSScriptAnalyzer'
          cache-key-suffix: 'lint'

      - name: Run PSScriptAnalyzer
        id: lint
        run: |
          $ErrorActionPreference = 'Stop'

          Write-Host "🔍 Running PSScriptAnalyzer..." -ForegroundColor Cyan

          # Analyze main code directories
          $paths = @('PoshGuard', 'tools', 'tests', 'config')
          $allResults = @()

          foreach ($path in $paths) {
            if (Test-Path $path) {
              Write-Host "`nAnalyzing: $path" -ForegroundColor Yellow
              $results = Invoke-ScriptAnalyzer `
                -Path $path `
                -Recurse `
                -Severity Error,Warning `
                -Settings ./config/PSScriptAnalyzerSettings.psd1

              if ($results) {
                $allResults += $results
              }
            }
          }

          # Generate summary
          $summary = "## PSScriptAnalyzer Results`n`n"

          if ($allResults) {
            Write-Host "::warning::Found $($allResults.Count) PSScriptAnalyzer issues"

            $grouped = $allResults | Group-Object Severity
            $summary += "**Total Issues:** $($allResults.Count)`n`n"

            foreach ($group in $grouped) {
              $summary += "- **$($group.Name):** $($group.Count)`n"
            }

            # Save results as JSON for artifact
            $allResults | ConvertTo-Json -Depth 10 | Set-Content 'pssa-results.json'

            # Add file annotations
            foreach ($result in $allResults) {
              $file = $result.ScriptPath -replace [regex]::Escape($PWD), ''
              $file = $file.TrimStart('\', '/')
              $level = if ($result.Severity -eq 'Error') { 'error' } else { 'warning' }
              Write-Host "::$level file=$file,line=$($result.Line),col=$($result.Column)::$($result.RuleName): $($result.Message)"
            }

            # Fail if critical errors found
            $errors = $allResults | Where-Object Severity -eq 'Error'
            if ($errors) {
              $summary += "`n❌ **Build failed:** Found $($errors.Count) error-level violations`n"
              $summary | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
              exit 1
            }

            $summary += "`n✓ No blocking errors found`n"
          } else {
            $summary += "✅ No issues found!`n"
            Write-Host "✓ No PSScriptAnalyzer issues found!" -ForegroundColor Green
          }

          $summary | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append

      - name: Upload analysis results
        uses: actions/upload-artifact@d0d5ba7887b7f651bea0d47495e1e9e0c210a8ec # v4.6.2
        if: always() && hashFiles('pssa-results.json') != ''
        with:
          name: pssa-results-windows
          path: pssa-results.json
          retention-days: 30
          if-no-files-found: ignore

  test:
    name: Run Pester Tests
    runs-on: windows-latest
    timeout-minutes: 20
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@7884fcad6b5d53d10323aee724dc68d8b9096a2e # v5.0.0
        with:
          fetch-depth: 1

      - name: Setup PowerShell modules
        uses: ./.github/actions/setup-powershell
        with:
          modules: 'Pester'
          cache-key-suffix: 'test'

      - name: Run Pester tests
        id: pester
        run: |
          $ErrorActionPreference = 'Stop'

          Write-Host "🧪 Running Pester tests..." -ForegroundColor Cyan

          $config = New-PesterConfiguration
          $config.Run.Path = './tests/'
          $config.Run.Exit = $true
          $config.Output.Verbosity = 'Detailed'
          $config.TestResult.Enabled = $true
          $config.TestResult.OutputPath = 'TestResults.xml'
          $config.TestResult.OutputFormat = 'NUnitXml'
          $config.CodeCoverage.Enabled = $false

          # Run tests
          $result = Invoke-Pester -Configuration $config

          # Generate summary
          $summary = "## Pester Test Results`n`n"
          $summary += "**Total Tests:** $($result.TotalCount)`n"
          $summary += "- ✅ **Passed:** $($result.PassedCount)`n"
          $summary += "- ❌ **Failed:** $($result.FailedCount)`n"
          $summary += "- ⏭️ **Skipped:** $($result.SkippedCount)`n"
          $summary += "- ⚠️ **Not Run:** $($result.NotRunCount)`n"
          $summary += "`n**Duration:** $($result.Duration)`n"

          if ($result.FailedCount -gt 0) {
            $summary += "`n### Failed Tests`n`n"
            foreach ($test in $result.Failed) {
              $summary += "- ``$($test.ExpandedPath)``:`n"
              $summary += "  - **Error:** $($test.ErrorRecord.Exception.Message)`n"
            }
          }

          $summary | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append

          if ($result.FailedCount -gt 0) {
            Write-Host "::error::$($result.FailedCount) test(s) failed"
            exit 1
          }

          Write-Host "✓ All tests passed!" -ForegroundColor Green

      - name: Upload test results
        uses: actions/upload-artifact@d0d5ba7887b7f651bea0d47495e1e9e0c210a8ec # v4.6.2
        if: always()
        with:
          name: test-results-windows
          path: TestResults.xml
          retention-days: 30
          if-no-files-found: ignore

  package:
    name: Create Package
    needs: [lint, test]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@7884fcad6b5d53d10323aee724dc68d8b9096a2e # v5.0.0
        with:
          fetch-depth: 1

      - name: Create package
        shell: bash
        run: |
          set -euo pipefail

          echo "📦 Creating package..."

          zip -r "poshguard-${{ github.sha }}.zip" \
            tools/ \
            PoshGuard/ \
            README.md \
            LICENSE \
            docs/CHANGELOG.md \
            docs/SECURITY.md \
            docs/CONTRIBUTING.md

          # Generate checksums
          sha256sum "poshguard-${{ github.sha }}.zip" > "poshguard-${{ github.sha }}.zip.sha256"

          echo "✓ Package created successfully"

          # Add to summary
          {
            echo "## Package Created"
            echo ""
            echo "- **SHA:** \`${{ github.sha }}\`"
            echo "- **Size:** $(du -h "poshguard-${{ github.sha }}.zip" | cut -f1)"
            echo ""
            echo "\`\`\`"
            cat "poshguard-${{ github.sha }}.zip.sha256"
            echo "\`\`\`"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Upload package artifact
        uses: actions/upload-artifact@d0d5ba7887b7f651bea0d47495e1e9e0c210a8ec # v4.6.2
        with:
          name: poshguard-package
          path: |
            poshguard-${{ github.sha }}.zip
            poshguard-${{ github.sha }}.zip.sha256
          retention-days: 30
          if-no-files-found: error
