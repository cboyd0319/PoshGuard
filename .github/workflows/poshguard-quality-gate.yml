name: PoshGuard Quality Gate

# This workflow uses the local PoshGuard module to perform quality analysis
# It demonstrates using PoshGuard in CI/CD pipelines

on:
  pull_request:
    branches: [main, develop]
    paths:
      - '**.ps1'
      - '**.psm1'
      - '**.psd1'
      - '.github/workflows/poshguard-quality-gate.yml'
      - '.github/actions/**'
  push:
    branches: [main]
    paths:
      - '**.ps1'
      - '**.psm1'
      - '**.psd1'
      - '.github/workflows/poshguard-quality-gate.yml'
      - '.github/actions/**'
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: pwsh

env:
  # Quality gate thresholds
  MAX_CRITICAL_ISSUES: 0
  MAX_HIGH_ISSUES: 2
  MAX_MEDIUM_ISSUES: 10
  MIN_CONFIDENCE_SCORE: 0.75
  COVERAGE_THRESHOLD: 70

jobs:
  poshguard-analysis:
    name: PoshGuard Code Quality Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 1
      
      - name: Setup PowerShell modules
        uses: ./.github/actions/setup-powershell
        with:
          modules: 'PSScriptAnalyzer'
          cache-key-suffix: 'quality-gate'
      
      - name: Import local PoshGuard module
        run: |
          $ErrorActionPreference = 'Stop'
          
          Write-Host "Loading local PoshGuard module..." -ForegroundColor Cyan
          
          # Import the local module (not from PSGallery)
          Import-Module ./PoshGuard/PoshGuard.psd1 -Force
          
          $module = Get-Module PoshGuard
          if ($module) {
            Write-Host "✓ PoshGuard v$($module.Version) loaded successfully" -ForegroundColor Green
          } else {
            Write-Error "Failed to load PoshGuard module"
            exit 1
          }
      
      - name: Run PoshGuard analysis
        id: analysis
        run: |
          $ErrorActionPreference = 'Continue'  # Don't stop on individual file errors
          
          Write-Host "🔍 Running PoshGuard analysis..." -ForegroundColor Cyan
          
          # Analyze main code paths (excluding samples/before-* and tests)
          $pathsToAnalyze = @('PoshGuard', 'tools', 'config')
          $results = @()
          $totalFiles = 0
          $successFiles = 0
          $failedFiles = 0
          
          foreach ($path in $pathsToAnalyze) {
            if (Test-Path $path) {
              Write-Host "`nAnalyzing directory: $path" -ForegroundColor Yellow
              
              Get-ChildItem -Path $path -Include *.ps1,*.psm1,*.psd1 -Recurse -File | ForEach-Object {
                $file = $_.FullName
                $totalFiles++
                
                Write-Host "  Checking: $($_.Name)" -ForegroundColor Gray
                
                try {
                  # Use PSScriptAnalyzer through PoshGuard
                  $analysis = Invoke-PoshGuard -Path $file -Verbose 4>&1
                  
                  $results += @{
                    File = $file
                    Status = "Success"
                  }
                  $successFiles++
                }
                catch {
                  Write-Warning "Analysis failed for $($_.Name): $_"
                  $results += @{
                    File = $file
                    Status = "Failed"
                    Error = $_.Exception.Message
                  }
                  $failedFiles++
                }
              }
            }
          }
          
          # Generate summary
          $summary = "## PoshGuard Analysis Summary`n`n"
          $summary += "- **Total Files:** $totalFiles`n"
          $summary += "- **Successful:** $successFiles`n"
          $summary += "- **Failed:** $failedFiles`n"
          
          Write-Host "`n📊 Analysis Summary:" -ForegroundColor Cyan
          Write-Host "  Total files: $totalFiles" -ForegroundColor White
          Write-Host "  Successful: $successFiles" -ForegroundColor Green
          Write-Host "  Failed: $failedFiles" -ForegroundColor Red
          
          # Set outputs for quality gate
          "total_files=$totalFiles" >> $env:GITHUB_OUTPUT
          "success_files=$successFiles" >> $env:GITHUB_OUTPUT
          "failed_files=$failedFiles" >> $env:GITHUB_OUTPUT
          
          $summary | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
      
      - name: Security scan
        id: security
        run: |
          $ErrorActionPreference = 'Continue'
          
          Write-Host "🔒 Running security scan..." -ForegroundColor Cyan
          
          $criticalIssues = 0
          $highIssues = 0
          $mediumIssues = 0
          $lowIssues = 0
          
          # Scan main code paths
          $pathsToScan = @('PoshGuard', 'tools', 'config')
          
          foreach ($path in $pathsToScan) {
            if (Test-Path $path) {
              Get-ChildItem -Path $path -Include *.ps1,*.psm1 -Recurse -File | ForEach-Object {
                $file = $_.FullName
                $content = Get-Content $file -Raw -ErrorAction SilentlyContinue
                
                if ($content) {
                  # Check for hard-coded secrets (basic pattern matching)
                  if ($content -match '(?i)(password|secret|apikey|token)\s*=\s*[''"][^''"]{8,}[''"]') {
                    Write-Warning "⚠️ Potential hard-coded secret in $($_.Name)"
                    $criticalIssues++
                  }
                  
                  # Check for weak cryptography
                  if ($content -match '(?i)\b(MD5|SHA1|DES|RC4)\b') {
                    Write-Warning "⚠️ Weak cryptography detected in $($_.Name)"
                    $highIssues++
                  }
                  
                  # Check for Invoke-Expression with variables (code injection risk)
                  if ($content -match 'Invoke-Expression\s+\$|iex\s+\$') {
                    Write-Warning "⚠️ Code injection risk in $($_.Name)"
                    $criticalIssues++
                  }
                }
              }
            }
          }
          
          $summary = "## Security Scan Results`n`n"
          $summary += "- 🔴 **Critical:** $criticalIssues`n"
          $summary += "- 🟠 **High:** $highIssues`n"
          $summary += "- 🟡 **Medium:** $mediumIssues`n"
          $summary += "- ⚪ **Low:** $lowIssues`n"
          
          Write-Host "`n📋 Security Summary:" -ForegroundColor Cyan
          Write-Host "  Critical: $criticalIssues" -ForegroundColor Red
          Write-Host "  High: $highIssues" -ForegroundColor Yellow
          Write-Host "  Medium: $mediumIssues" -ForegroundColor Gray
          Write-Host "  Low: $lowIssues" -ForegroundColor Gray
          
          "critical_issues=$criticalIssues" >> $env:GITHUB_OUTPUT
          "high_issues=$highIssues" >> $env:GITHUB_OUTPUT
          "medium_issues=$mediumIssues" >> $env:GITHUB_OUTPUT
          "low_issues=$lowIssues" >> $env:GITHUB_OUTPUT
          
          $summary | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
      
      - name: Quality gate evaluation
        id: quality_gate
        run: |
          $ErrorActionPreference = 'Stop'
          
          Write-Host "🎯 Evaluating quality gates..." -ForegroundColor Cyan
          
          $passed = $true
          $reasons = @()
          
          $criticalIssues = [int]"${{ steps.security.outputs.critical_issues }}"
          $highIssues = [int]"${{ steps.security.outputs.high_issues }}"
          $failedFiles = [int]"${{ steps.analysis.outputs.failed_files }}"
          
          # Check critical issues
          if ($criticalIssues -gt ${{ env.MAX_CRITICAL_ISSUES }}) {
            $passed = $false
            $reasons += "Too many critical security issues ($criticalIssues > ${{ env.MAX_CRITICAL_ISSUES }})"
          }
          
          # Check high issues
          if ($highIssues -gt ${{ env.MAX_HIGH_ISSUES }}) {
            $passed = $false
            $reasons += "Too many high severity issues ($highIssues > ${{ env.MAX_HIGH_ISSUES }})"
          }
          
          # Check failed files
          if ($failedFiles -gt 0) {
            $passed = $false
            $reasons += "Some files failed analysis ($failedFiles files)"
          }
          
          $summary = "## Quality Gate Result`n`n"
          
          if ($passed) {
            Write-Host "`n✅ Quality gate: PASSED" -ForegroundColor Green
            $summary += "### ✅ PASSED`n`n"
            $summary += "All quality gates passed successfully.`n"
            "status=passed" >> $env:GITHUB_OUTPUT
            "result=✅ Quality gate passed" >> $env:GITHUB_OUTPUT
          }
          else {
            Write-Host "`n❌ Quality gate: FAILED" -ForegroundColor Red
            Write-Host "`nReasons:" -ForegroundColor Yellow
            $reasons | ForEach-Object { 
              Write-Host "  • $_" -ForegroundColor Red 
            }
            
            $summary += "### ❌ FAILED`n`n"
            $summary += "**Reasons:**`n"
            $reasons | ForEach-Object { $summary += "- $_`n" }
            
            "status=failed" >> $env:GITHUB_OUTPUT
            "result=❌ Quality gate failed" >> $env:GITHUB_OUTPUT
          }
          
          $summary | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
          
          if (!$passed) {
            exit 1
          }
      
      - name: Generate report
        if: always()
        run: |
          $ErrorActionPreference = 'Stop'
          
          $report = "# PoshGuard Quality Report`n`n"
          $report += "## Summary`n"
          $report += "- **Total Files Analyzed**: ${{ steps.analysis.outputs.total_files }}`n"
          $report += "- **Successful**: ${{ steps.analysis.outputs.success_files }}`n"
          $report += "- **Failed**: ${{ steps.analysis.outputs.failed_files }}`n`n"
          $report += "## Security Issues`n"
          $report += "- **Critical**: ${{ steps.security.outputs.critical_issues }} (Max: ${{ env.MAX_CRITICAL_ISSUES }})`n"
          $report += "- **High**: ${{ steps.security.outputs.high_issues }} (Max: ${{ env.MAX_HIGH_ISSUES }})`n"
          $report += "- **Medium**: ${{ steps.security.outputs.medium_issues }} (Max: ${{ env.MAX_MEDIUM_ISSUES }})`n"
          $report += "- **Low**: ${{ steps.security.outputs.low_issues }}`n`n"
          $report += "## Quality Gate`n"
          $report += "${{ steps.quality_gate.outputs.result }}`n`n"
          $report += "---`n"
          $report += "Generated by [PoshGuard](https://github.com/cboyd0319/PoshGuard) v4.3.0`n"
          
          $report | Out-File -FilePath quality-report.md
          Write-Host "📄 Report saved to quality-report.md"
      
      - name: Upload report
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.5.0
        with:
          name: poshguard-quality-report
          path: quality-report.md
          retention-days: 30
          if-no-files-found: error
      
      - name: Comment on PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@8ea07e235ab47f6e899eefd12e99ef5a8c2844de # v7.0.2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('quality-report.md', 'utf8');
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

